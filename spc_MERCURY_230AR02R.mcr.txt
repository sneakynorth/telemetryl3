// @author Anton Goncharov <mail@a-goncharov.com>
// @version 0.5125-spc 2021-07-12
// @see Mercury-230 protocol emulation for Weintek HMI & EasyBuilder 

unsigned short Tag_230AR02R_P0 = 100
unsigned short Tag_230AR02R_P1 = 102
unsigned short Tag_230AR02R_P2 = 104
unsigned short Tag_230AR02R_P3 = 106
unsigned short Tag_230AR02R_Q0 = 110
unsigned short Tag_230AR02R_Q1 = 112
unsigned short Tag_230AR02R_Q2 = 114
unsigned short Tag_230AR02R_Q3 = 116
unsigned short Tag_230AR02R_S0 = 120
unsigned short Tag_230AR02R_S1 = 122
unsigned short Tag_230AR02R_S2 = 124
unsigned short Tag_230AR02R_S3 = 126
unsigned short Tag_230AR02R_U1 = 132
unsigned short Tag_230AR02R_U2 = 134
unsigned short Tag_230AR02R_U3 = 136
unsigned short Tag_230AR02R_I1 = 142
unsigned short Tag_230AR02R_I2 = 144
unsigned short Tag_230AR02R_I3 = 146
unsigned short Tag_230AR02R_COSFi0 = 150
unsigned short Tag_230AR02R_COSFi1 = 152
unsigned short Tag_230AR02R_COSFi2 = 154
unsigned short Tag_230AR02R_COSFi3 = 156
unsigned short Tag_230AR02R_F = 160
unsigned short Tag_230AR02R_Fi12 = 172
unsigned short Tag_230AR02R_Fi31 = 174
unsigned short Tag_230AR02R_Fi23 = 176
unsigned short Tag_230AR02R_U12 = 182
unsigned short Tag_230AR02R_U23 = 184
unsigned short Tag_230AR02R_U31 = 186
unsigned short Tag_230AR02R_Eap = 190
unsigned short Tag_230AR02R_Ean = 192
unsigned short Tag_230AR02R_Erp = 194
unsigned short Tag_230AR02R_Ern = 196
unsigned short Tag_230AR02R_Tin = 168
unsigned short Tag_230AR02R_SN = 108
unsigned short Tag_230AR02R_SW = 118
unsigned short Tag_230AR02R_ADR = 128
unsigned short Tag_230AR02R_FLG = 188
unsigned short Tag_230AR02R_ERR = 198
unsigned short Tag_230AR02R_KTU = 138
unsigned short Tag_230AR02R_KU1 = 162
unsigned short Tag_230AR02R_KU2 = 164
unsigned short Tag_230AR02R_KU3 = 166
unsigned short Tag_230AR02R_KTI = 148
unsigned short Tag_230AR02R_MD = 178
//
char request[16]
char response[32]
char addr = 1
char req_num = 0, type_param = 0, ext_param = 0, read_count = 0, i = 0
char chksum_lb = 0, chksum_hb = 0
short chksum = 0, return_value = 0, response_chksum = 0
short result[2]


//===
sub short get_param14(char req_num_, char type_param_, char ext_param_, char read_count_)
char chksum_lb_ = 0, chksum_hb_ = 0
short chksum_ = 0, response_chksum_ = 0, return_value_ = 0
short result_[4]
unsigned int serial
unsigned int software

FILL(request[0], 0, 16)
FILL(response[0], 0, 32)
FILL(result_[0], 0, 4)

return_value_ = 0
request[0] = addr
request[1] = req_num_
request[2] = type_param_

char write_count = 0
if ext_param_ == 0x7f then

CRC(request[0], chksum_, 3)
LOBYTE(chksum_, request[3])
HIBYTE(chksum_, request[4])
write_count = 5
SetDataEx(write_count, "LocalHMI", LW, 99, 1)
OUTPORT(request[0], "FREE-PROTOCOL", write_count)

else 
if ext_param_ <> 0x7f then
request[3] = ext_param_
CRC(request[0], chksum_, 4)
LOBYTE(chksum_, request[4])
HIBYTE(chksum_, request[5])
write_count = 6
SetDataEx(write_count, "LocalHMI", LW, 99, 1)
OUTPORT(request[0], "FREE-PROTOCOL", write_count)
end if

end if

INPORT(response[0], "FREE-PROTOCOL", read_count_, return_value_)

CRC(response[0], chksum_, read_count_-2)

if type_param_ == 0x11 or type_param_ == 0x16 then
//if ext_param_ == 0x70 or ext_param_ == 0x61 or ext_param_ == 0x62 or ext_param_ == 0x63 or read_count_ == 5 then
//response_chksum_ = response[3] + (response[4]<<8)
//else
response_chksum_ = response[4] + (response[5]<<8)
//end if
//else if not (type_param_ == 0x00 and req_num_ == 0x05) then
end if

if type_param_ == 0x05 or read_count_ == 5 then
response_chksum_ = response[3] + (response[4]<<8)
else if (type_param_ == 0x00 and req_num_ == 0x08) or read_count_ == 10 then
response_chksum_ = response[8] + (response[9]<<8)
else if type_param_ == 0x03 or read_count_ == 6 then
response_chksum_ = response[4] + (response[5]<<8)
else if type_param_ == 0x02 or read_count_ == 7 then
response_chksum_ = response[5] + (response[6]<<8)
else if type_param_ == 0x0a or read_count_ == 9 then
response_chksum_ = response[7] + (response[8]<<8)
//not works
//else if type_param_ == 0x2f or read_count_ == 19 then
//response_chksum_ = response[17] + (response[18]<<8)
else if (type_param_ == 0x00 and req_num_ == 0x05) then
response_chksum_ = response[17] + (response[18]<<8)
else if type_param_ == 0x01 or read_count_ == 27 then
response_chksum_ = response[25] + (response[26]<<8)
//not works
//else if type_param_ == 0x0c or read_count_ == 9 then
//response_chksum_ = response[7] + (response[8]<<8)
end if

LOBYTE(chksum_, chksum_lb_)
HIBYTE(chksum_, chksum_hb_)


if return_value_ == read_count_ and chksum_ == response_chksum_ and response[0] == addr then

if type_param_ == 0x00 and req_num_ == 0x05 then

result_[0] = response[3] + (response[4]<<8)
result_[1] = response[1] + (response[2]<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Eap, 2)

result_[0] = response[7] + (response[8]<<8)
result_[1] = response[5] + (response[6]<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Ean, 2)

result_[0] = response[11] + (response[12]<<8)
result_[1] = response[9] + (response[10]<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Erp, 2)

result_[0] = response[15] + (response[16]<<8)
result_[1] = response[13] + (response[14]<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Ern, 2)

end if


if type_param_ == 0x11 then

char neg_p = 0
neg_p = (response[1] & 0x80)>>7
char neg_q = 0
neg_q = (response[1] & 0x40)>>6
char neg_p_neg_q
neg_p_neg_q = neg_p & neg_q
//response[1] = response[1] & 0x3f

result_[0] = response[2] + (response[3]<<8)
result_[1] = response[1] & 0x3f

if ext_param_ == 0x00 then
if neg_p > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P0, 2)
end if

if ext_param_ == 0x01 then
SetDataEx(neg_p, "LocalHMI", LW, 10, 1)
if neg_p > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P1, 2)
end if

if ext_param_ == 0x02 then
SetDataEx(neg_p, "LocalHMI", LW, 40, 1)
if neg_p > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P2, 2)
end if

if ext_param_ == 0x03 then
if neg_p > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P3, 2)
end if

if ext_param_ == 0x04 then
if neg_q > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q0, 2)
end if

if ext_param_ == 0x05 then
if neg_q > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q1, 2)
end if

if ext_param_ == 0x06 then
if neg_q > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q2, 2)
end if

if ext_param_ == 0x07 then
if neg_q > 0 then
result_[1] = ~ result_[1]
result_[0] = ~ result_[0]
end if
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q3, 2)
end if


if ext_param_ == 0x08 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S0, 2)
end if

if ext_param_ == 0x09 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S1, 2)
end if

if ext_param_ == 0x0a then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S2, 2)
end if

if ext_param_ == 0x0b then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S3, 2)
end if

//not works
if ext_param_ == 0x81 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U12, 2)
end if
//not works
if ext_param_ == 0x82 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U23, 2)
end if
//not works
if ext_param_ == 0x83 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U31, 2)
end if
//not works
if ext_param_ == 0x61 then
result_[0] = response[1] +((response[2] & 0x3f)<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KU1, 1)
end if
//not works
if ext_param_ == 0x62 then
result_[0] = response[1] +((response[2] & 0x3f)<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KU2, 2)
end if
//not works
if ext_param_ == 0x63 then
result_[0] = response[1] +((response[2] & 0x3f)<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KU3, 2)
end if
// not works
//if ext_param_ == 0x70 then
//result_[0] = response[2] + ((response[1] & 0x3f)<<8)
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Tin, 1)
//end if

end if


if type_param_ == 0x16 then

response[1] = response[1] & 0x3f
//if ext_param_ == 0x70 then
//result_[0] = response[2] + ((response[1] & 0x3f)<<8)
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Tin, 1)
if ext_param_ == 0x40 then
result_[0] = response[2] + (response[3]<<8)
result_[1] = response[1]
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_F, 2)
end if

end if

if type_param_ == 0x05 then
result_[0] = response[2] + (response[1]<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_ADR, 1)
else if type_param_ == 0x00 and req_num_ == 0x08 then
//0x41755015(692793871) > 41755015
serial = response[4] + (response[3]*100) + (response[2]*10000) + (response[1]*1000000)
SetDataEx(serial, "LocalHMI", LW, Tag_230AR02R_SN, 1)
else if type_param_ == 0x03 then
software = response[3] + (response[2]*100) + (response[1]*10000) 
SetDataEx(software, "LocalHMI", LW, Tag_230AR02R_SW, 1)
else if type_param_ == 0x02 then
result_[0] = response[2] + (response[1]<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KTU, 1)
result_[0] = response[4] + (response[3]<<8)
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KTI, 1)
else if type_param_ == 0x0a then
result_[0] = response[5]
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_ERR, 1)
//not works
//else if type_param_ == 0x2f then
//result_[0] = response[3] + (response[4]<<8)

//SetDataEx(response[3], "LocalHMI", LW, 25, 1)
//SetDataEx(response[4], "LocalHMI", LW, 27, 1)

SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_FLG, 1)
else if type_param_ == 0x01 then
//0x41755015(692793871) > 41755015
serial = response[4] + (response[3]*100) + (response[2]*10000) + (response[1]*1000000)
SetDataEx(serial, "LocalHMI", LW, Tag_230AR02R_SN, 1)
else if type_param_ == 0x03 then
software = response[3] + (response[2]*100) + (response[1]*10000) 
SetDataEx(software, "LocalHMI", LW, Tag_230AR02R_SW, 1)
result_[0] = response[12] + (response[11]<<8)
result_[1] = response[14] + (response[13]<<8)
result_[2] = response[16] + (response[15]<<8)
result_[3] = 0 
//182 195 131 4   0   0
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_MD, 4)

//not works
//else if type_param_ == 0x0c then
//1 193 224 0 0 0 >> ERROR!!!
//result_[0] = response[2] + (response[1]<<8)
//result_[1] = response[4] + (response[3]<<8)
//result_[2] = response[6] + (response[5]<<8)
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_MD, 3)

end if


// not works
//if type_param_ == 0x14 and ext_param_ == 0x01 then

//response[1] = response[1] & 0x3f
//result_[0] = response[3] + (response[4]<<8)
//result_[1] = response[1]
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P0, 2)

//response[5] = response[5] & 0x3f
//result_[0] = response[7] + (response[8]<<8)
//result_[1] = response[5]
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P1, 2)

//response[9] = response[9] & 0x3f
//result_[0] = response[11] + (response[12]<<8)
//result_[1] = response[9]
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P2, 2)

//response[13] = response[13] & 0x3f
//result_[0] = response[15] + (response[16]<<8)
//result_[1] = response[13]
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P3, 2)

//end if


//SetDataEx(ext_param_, "LocalHMI", LW, 10, 1)
//SetDataEx(response[1], "LocalHMI", LW, 12, 1)
//SetDataEx(response[2], "LocalHMI", LW, 14, 1)
//SetDataEx(response[3], "LocalHMI", LW, 16, 1)
//SetDataEx(response[4], "LocalHMI", LW, 18, 1)

end if

return return_value_

end sub

//===
sub short get_param34(char req_num_, char type_param_, char ext_param_, char read_count_)
char chksum_lb_ = 0, chksum_hb_ = 0
short chksum_ = 0, response_chksum_ = 0, return_value_ = 0
short result_[2]

FILL(request[0], 0, 16)
FILL(response[0], 0, 32)
FILL(result_[0], 0, 2)

return_value_ = 0
request[0] = addr
request[1] = req_num_
request[2] = type_param_
request[3] = ext_param_

CRC(request[0], chksum_, 4)
LOBYTE(chksum_, request[4])
HIBYTE(chksum_, request[5])

OUTPORT(request[0], "FREE-PROTOCOL", 6)

INPORT(response[0], "FREE-PROTOCOL", read_count_, return_value_)

CRC(response[0], chksum_, read_count_-2)
response_chksum_ = response[10] + (response[11]<<8)
if read_count_ == 15 then
response_chksum_ = response[13] + (response[14]<<8)
end if
LOBYTE(chksum_, chksum_lb_)
HIBYTE(chksum_, chksum_hb_)


//if read_count_ == 15 then

//SetDataEx(response[10], "LocalHMI", LW, 7, 1)
//SetDataEx(response[11], "LocalHMI", LW, 9, 1)
//SetDataEx(response[12], "LocalHMI", LW, 11, 1)
//SetDataEx(response[13], "LocalHMI", LW, 13, 1)
//SetDataEx(response[14], "LocalHMI", LW, 15, 1)

//SetDataEx(chksum_lb_, "LocalHMI", LW, 17, 1)
//SetDataEx(chksum_hb_, "LocalHMI", LW, 19, 1)

//end if



if return_value_ == read_count_ and chksum_ == response_chksum_ and response[0] == addr then
//SetDataEx(return_value_, "LocalHMI", LW, 3, 1)
//SetDataEx(ext_param_, "LocalHMI", LW, 5, 1)
//SetDataEx(chksum_lb_, "LocalHMI", LW, 12, 1)
//SetDataEx(chksum_hb_, "LocalHMI", LW, 14, 1)

//SetDataEx(response[10], "LocalHMI", LW, 16, 1)
//SetDataEx(response[11], "LocalHMI", LW, 18, 1)

if ext_param == 0x61 then

response[2] = response[2] & 0x3f
response[4] = response[4] & 0x3f
response[6] = response[6] & 0x3f
result_[0] = response[1] + ((response[2] & 0x3f)<<8)
result_[1] = 0 

else if ext_param_ == 0x11 or ext_param_ == 0x21 or ext_param_ == 0x31 or ext_param_ == 0x51 or ext_param_ == 0x81 then
response[1] = response[1] & 0x3f
response[4] = response[4] & 0x3f
response[7] = response[7] & 0x3f
if return_value_ == 15 then
response[10] = response[10] & 0x3f
end if

result_[0] = response[2] + (response[3]<<8)
result_[1] = (response[1] & 0x3f)

end if



//if ext_param_ == 0x01 or ext_param_ == 0x02 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P0, 2)
//else if ext_param_ == 0x05 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q0, 2)
//else if ext_param_ == 0x09 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S0, 2)
if ext_param_ == 0x11 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U1, 2)
else if ext_param_ == 0x21 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_I1, 2)
else if ext_param_ == 0x31 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_COSFi1, 2)
else if ext_param_ == 0x51 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Fi12, 2)
else if ext_param_ == 0x81 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U12, 2)
else if ext_param_ == 0x61 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KU1, 2)
end if

if ext_param == 0x61 then
result_[0] = response[3] + ((response[4] & 0x3f)<<8)
result_[1] = 0 
else
result_[0] = response[5] + (response[6]<<8)
result_[1] = (response[4] & 0x3f) 
end if

//if ext_param_ == 0x01 or ext_param_ == 0x02 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P1, 2)
//else if ext_param_ == 0x05 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q1, 2)
//else if ext_param_ == 0x09 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S1, 2)
if ext_param_ == 0x11 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U2, 2)
else if ext_param_ == 0x21 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_I2, 2)
else if ext_param_ == 0x31 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_COSFi2, 2)
else if ext_param_ == 0x51 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Fi31, 2)
else if ext_param_ == 0x81 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U23, 2)
else if ext_param_ == 0x61 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KU2, 2)
end if

if ext_param == 0x61 then
result_[0] = response[5] + ((response[6] & 0x3f)<<8)
result_[1] = 0 
else
result_[0] = response[8] + (response[9]<<8)
result_[1] = (response[7] & 0x3f)
end if

//if ext_param_ == 0x01 or ext_param_ == 0x02 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P2, 2)
//else if ext_param_ == 0x05 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q2, 2)
//else if ext_param_ == 0x09 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S2, 2)
if ext_param_ == 0x11 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U3, 2)
else if ext_param_ == 0x21 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_I3, 2)
else if ext_param_ == 0x31 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_COSFi3, 2)
else if ext_param_ == 0x51 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Fi23, 2)
//not works
else if ext_param_ == 0x81 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_U31, 2)
//not works
else if ext_param_ == 0x61 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_KU3, 2)
end if


// not works
if return_value_ == 15 then

result_[0] = response[11] + (response[12]<<8)
result_[1] = (response[10] & 0x3f)

//if ext_param_ == 0x01 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_P3, 2)
//else if ext_param_ == 0x05 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_Q3, 2)
//else if ext_param_ == 0x09 then
//SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_S3, 2)
//end if
if ext_param_ == 0x31 then
SetDataEx(result_[0], "LocalHMI", LW, Tag_230AR02R_COSFi3, 2)
end if

end if

//SetDataEx(ext_param_, "LocalHMI", LW, 10, 1)
//SetDataEx(response[1], "LocalHMI", LW, 12, 1)
//SetDataEx(response[2], "LocalHMI", LW, 14, 1)
//SetDataEx(response[3], "LocalHMI", LW, 16, 1)
//SetDataEx(response[4], "LocalHMI", LW, 18, 1)

end if

return return_value_

end sub

//===


macro_command main()

//---
FILL(request[0], 0, 16)
FILL(response[0], 0, 32)

read_count = 4 
req_num = 0x01
type_param = 0x01
request[0] = addr
request[1] = req_num
request[2] = type_param

for i=3 to 8
request[i] = 1
next i

CRC(request[0], chksum, 9)
LOBYTE(chksum, request[9])
HIBYTE(chksum, request[10])

OUTPORT(request[0], "FREE-PROTOCOL", 11)

INPORT(response[0], "FREE-PROTOCOL", read_count, return_value)

if return_value > 0 then

//ADR not works
//get_param14(0x08, 0x05, 0x7f, 5)
//SN
get_param14(0x08, 0x00, 0x7f, 10)
//SW
get_param14(0x08, 0x03, 0x7f, 6)
//Err #5
get_param14(0x08, 0x0a, 0x7f, 9)

//KTI KTU not works
//get_param14(0x08, 0x02, 0x7f, 7)
//Flag #1-2 not works
//get_param14(0x08, 0x2f, 0x00, 19)

//Eap Ean Erp Ern
get_param14(0x05, 0x00, 0x00, 19)
//U1 - U3
get_param34(0x08, 0x16, 0x11, 12)
//I1 - I3
get_param34(0x08, 0x16, 0x21, 12)
//COSFI0 - COSFI1 12 - not 15!
get_param34(0x08, 0x16, 0x31, 12)
//get_param34(0x08, 0x16, 0x31, 15)
//FI1 - FI3
get_param34(0x08, 0x16, 0x51, 12)

//U12 U23 U31 not works returns always ZERO!!!
//get_param34(0x08, 0x16, 0x81, 12)
//KU1 - KU3 not works returns always ZERO!!!
//get_param34(0x08, 0x16, 0x61, 9)
//F
get_param14(0x08, 0x16, 0x40, 6)
//Tin not works
//get_param14(0x08, 0x11, 0x70, 5)
//P0 - P3
get_param14(0x08, 0x11, 0x00, 6)
get_param14(0x08, 0x11, 0x01, 6)
get_param14(0x08, 0x11, 0x02, 6)
get_param14(0x08, 0x11, 0x03, 6)
//Q0 - Q3
get_param14(0x08, 0x11, 0x04, 6)
get_param14(0x08, 0x11, 0x05, 6)
get_param14(0x08, 0x11, 0x06, 6)
get_param14(0x08, 0x11, 0x07, 6)
//S0 - S3
get_param14(0x08, 0x11, 0x08, 6)
get_param14(0x08, 0x11, 0x09, 6)
get_param14(0x08, 0x11, 0x0a, 6)
get_param14(0x08, 0x11, 0x0b, 6)

//not works
//U12 - U31
//get_param14(0x08, 0x11, 0x81, 6)
//get_param14(0x08, 0x11, 0x82, 6)
//get_param14(0x08, 0x11, 0x83, 6)
//not works
//KU1 - KU3
//get_param14(0x08, 0x11, 0x61, 5)
//get_param14(0x08, 0x11, 0x62, 5)
//get_param14(0x08, 0x11, 0x63, 5)

//not works
//get_param14(0x08, 0x14, 0x00, 19)
// not works fully - return 12 bytes only, NO P2, NO P3
//get_param34(0x08, 0x16, 0x01, 12)
//get_param34(0x08, 0x16, 0x05, 12)
//get_param34(0x08, 0x16, 0x09, 12)

//MD not works
//get_param14(0x08, 0x0c, 0x7f, 9)
//SN SW MD works but cannot interpret
//get_param14(0x08, 0x01, 0x00, 27)


end if

end macro_command